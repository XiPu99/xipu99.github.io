<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xi Pu&#39;s blog</title>
    <link>https://xipu99.github.io/cn/posts/</link>
    <description>Recent content in Posts on Xi Pu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Mar 2020 16:47:16 -0400</lastBuildDate>
    
	<atom:link href="https://xipu99.github.io/cn/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析URL</title>
      <link>https://xipu99.github.io/cn/posts/url-introduction/</link>
      <pubDate>Mon, 09 Mar 2020 16:47:16 -0400</pubDate>
      
      <guid>https://xipu99.github.io/cn/posts/url-introduction/</guid>
      <description>简单总结几个跟URL有关的概念：
域名 域名（domain name）简单来说就是对一个IP地址的别称。用www.example.com来举例子，com是顶级域名，其他常见的顶级域名还有gov, edu等。example.com是二级域名。前面再加上前缀www就变成了子域名（subdomain）。这些不同层级的域名将会被用作DNS查找过程中的参数。
DNS DNS全称为Domain Name System，是一个把域名和IP联系起来的系统。当你输入某某网站的网址并按下回车时，浏览器会向DNS询问该网址所对应的IP地址，然后发起http请求。
URL URL的全称为Uniform Resource Locator，URL无非就是一个给定的独特资源在Web上的地址。理论上说，每个有效的URL都指向一个独特的资源。这个资源可以是一个HTML页面，一个CSS文档，一幅图像，等等。
一个URL会有多个部分组成：
 协议（Protocol）：通常是http或者https 域名：也可以使用IP地址 端口：一台服务器可能会有多个端口来处理不同的服务，所以URL中的端口指定了将访问服务器的哪一个端口。http默认访问端口为80，https默认端口为443。一般浏览器会把默认端口隐藏起来。 路径：服务器上的资源路径 查询参数：提供给服务器的额外参数，由&amp;amp;符号分隔开的键/值对。 锚点（Anchor）：锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向  参考文章  什么是URL  </description>
    </item>
    
    <item>
      <title>HTML常用的两种标签</title>
      <link>https://xipu99.github.io/cn/posts/html-tags/</link>
      <pubDate>Fri, 06 Mar 2020 22:37:33 -0500</pubDate>
      
      <guid>https://xipu99.github.io/cn/posts/html-tags/</guid>
      <description>&amp;lt;a&amp;gt; 标签 你可以在“href”中添加以下：
 一个网页链接 一个目录路径 当前页面中的一个元素，比如如果用户点击了下面代码所展示的链接，页面就会跳到页面中id为header的元素。如果将href设为#时，则会直接跳转到页面的顶部：  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;#header&amp;#34;&amp;gt; Jump to the heading below &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 根据target属性所设置的不同值，当用户点击&amp;lt;a&amp;gt;标签所指的链接时，浏览器会有不同的行为：
 _self: 浏览器会使用当前页面来打开链接 _blank: 浏览器会打开一个新的页面  &amp;lt;img&amp;gt; 标签 &amp;lt;img&amp;gt;标签通常用来展示图片。
&amp;lt;img&amp;gt;标签有以下常见的属性可以设置：
  src：必须要设置的&amp;lt;img&amp;gt;属性，代表了想要插入的图片的路径
  alt: 可以提供一段解释这张图片的文字。如果因为各种原因图片加载失败，浏览器会自动把加载失败的图片转换成alt中设置的文字
  </description>
    </item>
    
    <item>
      <title>初步了解Java多线程</title>
      <link>https://xipu99.github.io/cn/posts/multithread/</link>
      <pubDate>Mon, 06 Jan 2020 08:22:58 -0800</pubDate>
      
      <guid>https://xipu99.github.io/cn/posts/multithread/</guid>
      <description>整理一下最近学习到的有关java多线程方面的知识：
什么时候使用多线程 IO密集（既有很多IO操作）时，原因主要是因为在普通单线程的情况下，当CPU执行了一个IO操作时，它就必须等待IO操作完成，而不能做其他事情，因此浪费了大量CPU的时间，这个状态被称为阻塞。如果我们使用了多线程，在执行IO操作之后，其他线程不必阻塞等待IO完成，可以完成其他工作，所以提高的CPU的使用率。
进程和线程 进程中可以包含多个线程。同一个进程中的线程享有一些共同的系统资源，比如说堆区，全局变量。除了共享的资源，每个线程会有一个自己独立的栈区和栈指针。
线程安全 当程序中有多个线程对同一个公有变量进行读写操作的时候，就有可能产生线程安全问题，因为我们使用的读写操作并不一定是原子操作。比如说，i++并不是一个原子操作，而是会被分解为三个步骤：
 从内存中取i的值 对i进行加1操作 把结果写回内存  在任意一个步骤执行结束后，操作系统都有可能切换到另外一个线程中。这种情况就有可能引起线程不安全的问题。
死锁 以下的方法可以用来预防死锁：
 所有的线程都按照相同的顺序获得资源的锁 使用不可变的类 使用synchronized块  当发生死锁问题时，我们可以使用java自带的jstack来查看每个线程调用的方法栈，从而判断死锁发生的原因。这个链接讲解了jstack输出内容代表的含义。
其他 第一次接触java的多线程，踩了不少坑。这里记录其中一个 害我花了一天debug的坑。
下面是我一开始写的经过简化过的一段代码。我自以为在最后的print语句会始终打印出1。然而，真正运行的结果时，有时会打印出1，有时打印出0。
public static void main(String[] args){ final int[] arr = {0}; Thread t = new Thread(){ @Override public void run(){ arr[0] = 1; } }; t.start(); System.out.println(arr[0]); //有时会打印出1，有时打印出0 } 导致这样的原因是你现在在main thread中开启了一个新的Thread t。当你调用了t.start()时，两个thread同时进行，然而你并不能保证是main thread的print先执行还是Thread t中的arr[0] = 1限制性，因为操作系统的线程调度有很大的随机性。
为了让这段代码达到我们预期的效果，也就是始终打印出1，我们可以调用Thread t的 join方法（如下面这段代码所示）。这个方法能使当前线程等待t执行完毕后在执行接下来的指令，所以保证了arr[0] = 1永远会在print语句前面被执行。
public static void main(String[] args){ final int[] arr = {0}; Thread t = new Thread(){ @Override public void run(){ arr[0] = 1; } }; t.</description>
    </item>
    
    <item>
      <title>HashMap浅析</title>
      <link>https://xipu99.github.io/cn/posts/java_hashmap/</link>
      <pubDate>Mon, 30 Dec 2019 20:28:18 -0800</pubDate>
      
      <guid>https://xipu99.github.io/cn/posts/java_hashmap/</guid>
      <description>整理一下最近学到的关于Java的HashMap知识点：
HashMap的核心基于哈希值的桶和链表。
哈希碰撞是指有两个对象因为有相同的哈希值被放入相同的桶中的情况。Java对这种情况的处理是将每个桶的内部结构变成一个链表。在Java 8中，如果一个桶里的链表长度大于8时，HashMap内部会把链表转换成红黑树来提高查找效率。把变为树的阈值取为8的原因是因为一个哈希桶中的元素数量大致是一个泊松分部，当数量超过8时，概率就非常小了。
如果我们使用HashMap的默认构造器，也就是不传入任何参数，那么创建出来的HashMap的初始容量为16，也就是说刚开始会有16个哈希桶，Java会用一个长度为16的数组来表示这些桶。
当我们使用map.put(key, val)这种操作时，Java先调用对象的hashcode()方法计算哈希值，然后根据这个哈希值把对象放入相应的哈希桶中。
为了通过对象的哈希值计算相应哈希桶的下标，我们需要hashcode所有可能的值（-2^31~2^31-1），映射到0~15之间。一个最直接的方法是对哈希值进行取余操作，也就是hashcode%16来得到桶的下标。但是，对负数取余会得到一个负数。其次，取余作为一种计算方法操作效率比较低。
HashMap源码中使用了位运算hashcode &amp;amp; (容量-1) 来计算桶的小标。这个位运算操作本质上就是利用二进制进行取余操作，同时这段源码也解释了为什么HashMap的容量必须为2的幂。
当HashMap里的元素数量超过了一个阈值时，Java会对它进行扩容，新的容量变为原来的两倍，这样做可以减少哈希碰撞。 阈值的值为容量和负载因子的乘积。在扩容的过程中，Java会对HashMap中的元素重新计算哈希值，然后放到扩容后的桶中。
关于HashMap，还有一个非常重要的点就是HashMap是非线程安全的。如果你想要使用线程安全的哈希表实现，可以使用ConcurrentHashMap。至于为什么HashMap不是线程安全的，简单来说是因为扩容时对桶中元素进行移动等读写操作时会造成死循环，具体原因可以参考这篇文章。</description>
    </item>
    
    <item>
      <title>Maven包管理</title>
      <link>https://xipu99.github.io/cn/posts/maven-package-management/</link>
      <pubDate>Sat, 28 Dec 2019 15:10:06 -0800</pubDate>
      
      <guid>https://xipu99.github.io/cn/posts/maven-package-management/</guid>
      <description>最近初步了解了maven和Java的编译过程，做一下知识的总结：
Java编译过程 我们都知道，平时我们在IDE中写的都是源代码，然而我们的电脑其实并“看不懂”源代码，这时候我们就需要一个叫编译器的东西把源代码转换成电脑能看懂的语言，比如说二进制。Java的编译器会把源代码转换成一种叫字节码的东西，这些文件以.class为后缀名，编译好之后通过JVM来运行。然而平时我们在写代码的时候却很少关注过甚至意识到还有这个过程。
我们会把这些.class文件打包成一个.jar文件。这个文件其实本质上是一个.zip文件，只不过Java把后缀名改成了.jar(如果不信的话，你可以试试把一个jar文件的后缀名改成zip，在mac上你可以直接双击解压)。
为什么需要包管理 在日常开发中，我们不可避免的会使用一些第三方库，也就是其他人写的代码。在没有maven这种包管理系统之前，程序员都是手动管理依赖包的，这样的过程十分麻烦，而且容易产生错误。有了maven之后，这种脏活累活就不需要程序员自己去做了。maven会在你的项目的根目录中添加一个叫pom.xml的文件，里面包含了各种跟你项目有关的信息，其中就包括了项目中依赖了哪些包这种信息。
如何解决包冲突 然而，maven不是万能的，有的时候我们会遇到包冲突的问题，也就是在我们的项目中，出现了多个有相同名字，不同版本号的包。
这个时候，maven必须强行选择其中一个版本的包来运行，然后忽略其他版本。这就导致了有时我们会遇到编译报错的问题，因为maven忽略的版本中可能包含了我们项目中所需要的类或方法。
为了解决这个问题，我们必须了解maven是如何进行这个选择的。
如果我们把程序中的依赖关系想象成数据结构中的树的话，maven解决的方法很容易理解，它具体遵守了以下两个原则：
 在依赖树中里根最近的依赖包会被保留 如果两个包和根有相同的距离，那么最先在pom.xml中出现的被保留  所以为了解决包冲突，我们可以直接在依赖树的根部声明一个我们想要保留的包名和它的版本号或者在pom.xml中使用&amp;lt;exclusion&amp;gt;标记.</description>
    </item>
    
  </channel>
</rss>